{"version":3,"sources":["src/app/demo/ui-elements/ui-basic/basic-student/basic-student.component.html","src/app/demo/ui-elements/ui-basic/basic-student/basic-student-routing.module.ts","src/app/demo/ui-elements/ui-basic/basic-student/basic-student.component.css","src/app/demo/ui-elements/ui-basic/basic-student/basic-student.component.ts","src/app/demo/ui-elements/ui-basic/basic-student/basic-student.module.ts"],"names":[],"mappings":"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","sourcesContent":["export default \" \\n<div class=\\\"container\\\">\\n  <form [formGroup]=\\\"registerStudent\\\" (ngSubmit)=\\\"register()\\\"> \\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-lg-3\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"exampleInputEmail1\\\">First Name</label>\\n      \\n        <input formControlName=\\\"firstName\\\" \\n        [ngClass]=\\\"{'is-invalid': registerStudent.get('firstName').errors && registerStudent.get('firstName').touched}\\\"\\n        type=\\\"text\\\" \\n        class=\\\"form-control\\\" \\n        id=\\\"exampleInputEmail1\\\" aria-describedby=\\\"emailHelp\\\" \\n        placeholder=\\\"First Name\\\">  \\n        <small id=\\\"emailHelp\\\" *ngIf=\\\"registerStudent.get('firstName').hasError('required') && registerStudent.get('firstName').touched\\\" class=\\\"invalid-feedback\\\">Please enter First Name</small>\\n        <small id=\\\"emailHelp\\\" *ngIf=\\\"registerStudent.get('firstName').hasError('minlength') && registerStudent.get('firstName').touched\\\" class=\\\"invalid-feedback\\\">Please enter valid name. Too short</small>\\n      </div>\\n    </div>\\n    <div class=\\\"col-lg-3\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"exampleInputEmail1\\\">Last Name</label>\\n\\n        <input formControlName=\\\"lastName\\\" type=\\\"text\\\" \\n        [ngClass]=\\\"{'is-invalid': registerStudent.get('lastName').errors && registerStudent.get('lastName').touched}\\\"\\n        class=\\\"form-control\\\" \\n        id=\\\"exampleInputEmail1\\\" aria-describedby=\\\"emailHelp\\\" \\n        placeholder=\\\"Last Name\\\">\\n        <small id=\\\"emailHelp\\\" *ngIf=\\\"registerStudent.get('lastName').hasError('required') && registerStudent.get('lastName').touched\\\" class=\\\"invalid-feedback\\\">Please enter First Name</small>\\n        <small id=\\\"emailHelp\\\" *ngIf=\\\"registerStudent.get('lastName').hasError('minlength') && registerStudent.get('lastName').touched\\\" class=\\\"invalid-feedback\\\">Please enter valid name. Too short</small>\\n          \\n      </div>\\n    </div>\\n    <div class=\\\"col-lg-3\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"exampleInputEmail1\\\">Email address</label>\\n        <input formControlName=\\\"email\\\" \\n        [ngClass]=\\\"{'is-invalid': registerStudent.get('email').errors && registerStudent.get('email').touched}\\\"\\n        type=\\\"email\\\" class=\\\"form-control\\\" \\n        id=\\\"exampleInputEmail1\\\" aria-describedby=\\\"emailHelp\\\" \\n        placeholder=\\\"Enter email\\\">\\n        <small id=\\\"emailHelp\\\" *ngIf=\\\"registerStudent.get('email').hasError('required') && registerStudent.get('email').touched\\\" class=\\\"invalid-feedback\\\">Please enter First Name</small>\\n        <small id=\\\"emailHelp\\\" *ngIf=\\\"registerStudent.get('email').hasError('minlength') && registerStudent.get('email').touched\\\" class=\\\"invalid-feedback\\\">Please enter valid email. Too short</small>\\n      \\n      </div>\\n    </div>\\n    <div class=\\\"col-lg-3\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"exampleInputEmail1\\\">Gender</label>\\n        <select formControlName=\\\"gender\\\" class=\\\"form-control\\\" \\n        [ngClass]=\\\"{'is-invalid': registerStudent.get('gender').errors && registerStudent.get('gender').touched}\\\"\\n        id=\\\"exampleFormControlSelect1\\\">\\n          <option [selected]=\\\"selected\\\" disabled>--Select--</option>\\n          <option value=\\\"male\\\">Male</option>\\n          <option value=\\\"female\\\">Female</option>\\n          <option value=\\\"other\\\">Other</option> \\n        </select>\\n        <small id=\\\"emailHelp\\\" class=\\\"invalid-feedback\\\">Please select gender</small>\\n       </div>\\n    </div>\\n  </div> \\n\\n  \\n\\n  <div class=\\\"row\\\">\\n      <div class=\\\"col-lg-3\\\">\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"exampleInputEmail1\\\">Date Of Birth</label>\\n          <input formControlName=\\\"dob\\\" \\n          [ngClass]=\\\"{'is-invalid': registerStudent.get('dob').errors && registerStudent.get('dob').touched}\\\"\\n          type=\\\"text\\\" \\n          \\n          class=\\\"form-control\\\" \\n          id=\\\"exampleInputEmail1\\\" aria-describedby=\\\"emailHelp\\\" \\n          name=\\\"dp\\\"\\n          placeholder=\\\"Date of birth\\\" bsDatepicker>\\n \\n\\n          <small id=\\\"emailHelp\\\" class=\\\"invalid-feedback\\\">Please select Birthdate</small>\\n        </div>\\n      </div>\\n      <div class=\\\"col-lg-3\\\">\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"exampleInputEmail1\\\">Mother Tongue</label>\\n          \\n          <input formControlName=\\\"motherTongue\\\"\\n          [ngClass]=\\\"{'is-invalid': registerStudent.get('motherTongue').errors && registerStudent.get('motherTongue').touched}\\\"\\n           type=\\\"text\\\" \\n           class=\\\"form-control\\\" \\n           id=\\\"exampleInputEmail1\\\" \\n           aria-describedby=\\\"emailHelp\\\" \\n           placeholder=\\\"Mother tongue\\\">\\n           <small id=\\\"emailHelp\\\" class=\\\"invalid-feedback\\\">Please select Birthdate</small>\\n        </div>\\n      </div>\\n      <div class=\\\"col-lg-3\\\">\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"exampleInputEmail1\\\">Nationality</label> \\n          <input \\n          [ngClass]=\\\"{'is-invalid': registerStudent.get('nationality').errors && registerStudent.get('nationality').touched}\\\"\\n          formControlName=\\\"nationality\\\" type=\\\"text\\\" \\n          class=\\\"form-control\\\" id=\\\"exampleInputEmail1\\\" aria-describedby=\\\"emailHelp\\\" placeholder=\\\"Nationality\\\">\\n          <small id=\\\"emailHelp\\\" class=\\\"invalid-feedback\\\">Please enter nationality</small>\\n        </div>\\n      </div>\\n      <div class=\\\"col-lg-3\\\">\\n          <div class=\\\"form-group\\\">\\n            <label for=\\\"exampleInputEmail1\\\">Father Name</label>\\n            <input formControlName=\\\"fathername\\\"\\n            [ngClass]=\\\"{'is-invalid': registerStudent.get('fathername').errors && registerStudent.get('fathername').touched}\\\" \\n            type=\\\"fathername\\\" \\n             class=\\\"form-control\\\" \\n             id=\\\"exampleInputEmail1\\\" aria-describedby=\\\"emailHelp\\\" \\n             placeholder=\\\"Father Name\\\">\\n             <small id=\\\"emailHelp\\\" class=\\\"invalid-feedback\\\">Please enter father name</small>\\n            </div>\\n        </div>\\n  </div>\\n\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-lg-3\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"exampleInputEmail1\\\">Phone</label>\\n        <input formControlName=\\\"phone\\\" \\n        (keyup)=\\\"checkAlpha($event)\\\"\\n        [ngClass]=\\\"{'is-invalid': registerStudent.get('phone').errors && registerStudent.get('phone').touched}\\\" \\n        type=\\\"text\\\" \\n        class=\\\"form-control\\\" \\n        id=\\\"exampleInputEmail1\\\" aria-describedby=\\\"emailHelp\\\" \\n        placeholder=\\\"Phone\\\">\\n        <small id=\\\"emailHelp\\\" *ngIf=\\\"registerStudent.get('phone').hasError('required') && registerStudent.get('phone').touched\\\" class=\\\"invalid-feedback\\\">Please enter Mobile no</small>\\n        <small id=\\\"emailHelp\\\" *ngIf=\\\"registerStudent.get('phone').hasError('minlength') && registerStudent.get('phone').touched\\\" class=\\\"invalid-feedback\\\">Enter Number must be 10 digit</small>\\n        <small id=\\\"emailHelp\\\" *ngIf=\\\"registerStudent.get('phone').hasError('maxlength') && registerStudent.get('phone').touched\\\" class=\\\"invalid-feedback\\\">Enter Number must be 10 digit</small>\\n        <small id=\\\"emailHelp\\\" *ngIf=\\\"registerStudent.get('phone').hasError('pattern') && registerStudent.get('phone').touched\\\" class=\\\"invalid-feedback\\\">Only digit allow</small>\\n\\n          </div>\\n    </div>\\n    <div class=\\\"col-lg-3\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"exampleInputEmail1\\\">Class level</label>\\n        <select (change)=\\\"LevelChange($event)\\\" formControlName=\\\"classLevel\\\" \\n        [ngClass]=\\\"{'is-invalid': registerStudent.get('classLevel').errors && registerStudent.get('classLevel').touched}\\\" \\n        class=\\\"form-control\\\" \\n        id=\\\"exampleFormControlSelect1\\\">\\n        <option value=\\\"-1\\\"  [selected]=\\\"selected\\\" disabled>--Select--</option>          \\n           <option value=\\\"1\\\">Junior</option>\\n          <option value=\\\"2\\\">Senior</option>\\n        </select>\\n        <small id=\\\"emailHelp\\\" class=\\\"invalid-feedback\\\">Please select Class level</small>\\n      </div>\\n    </div>\\n    <div class=\\\"col-lg-3\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"exampleInputEmail1\\\">Class</label>\\n        <select formControlName=\\\"standers\\\" \\n        (change)=\\\"ClassChange($event)\\\"\\n        appSelectRequiredValidator\\n        [ngClass]=\\\"{'is-invalid': registerStudent.get('standers').errors && registerStudent.get('standers').touched}\\\" \\n        class=\\\"form-control\\\" id=\\\"exampleFormControlSelect1\\\">\\n        <option [selected]=\\\"selected\\\">--Select--</option>\\n         <option *ngFor=\\\"let items of allClasses\\\">{{items.classes}}</option>\\n        </select>\\n        <small id=\\\"emailHelp\\\" class=\\\"invalid-feedback\\\">Please select class</small>\\n        <small id=\\\"emailHelp\\\" *ngIf=\\\"registerStudent.get('standers').hasError('defaultSelected') && registerStudent.get('standers').touched\\\" class=\\\"invalid-feedback\\\">Only digit allow</small>\\n \\n      </div>\\n    </div>\\n    <div class=\\\"col-lg-3\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"exampleInputEmail1\\\">Class Section</label>\\n        <select formControlName=\\\"classsection\\\" \\n        [ngClass]=\\\"{'is-invalid': registerStudent.get('classsection').errors && registerStudent.get('classsection').touched}\\\" \\n        class=\\\"form-control\\\" id=\\\"exampleFormControlSelect1\\\">\\n        <option [selected]=\\\"selected\\\">--Select--</option>\\n        <option *ngFor=\\\"let items of sections\\\">{{items}}</option>\\n        </select>\\n        <small id=\\\"emailHelp\\\" class=\\\"invalid-feedback\\\">Please select Section</small>\\n      </div>\\n    </div>\\n  \\n  </div>\\n\\n  <div class=\\\"row\\\">\\n      <div class=\\\"col-lg-3\\\">\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"exampleInputEmail1\\\">Admission Number</label>\\n          <input formControlName=\\\"admissionno\\\" \\n           type=\\\"text\\\"  \\n          [value]=\\\"admissionNo\\\"\\n          readonly\\n          class=\\\"form-control\\\" \\n          id=\\\"exampleInputEmail1\\\" aria-describedby=\\\"emailHelp\\\" \\n          placeholder=\\\"Admission no\\\">\\n         </div>\\n      </div>\\n      <div class=\\\"col-lg-3\\\">\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"exampleInputEmail1\\\">Roll Number</label>\\n          <input formControlName=\\\"rollno\\\" \\n          [ngClass]=\\\"{'is-invalid': registerStudent.get('rollno').errors && registerStudent.get('rollno').touched}\\\" \\n          type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"exampleInputEmail1\\\" aria-describedby=\\\"emailHelp\\\" placeholder=\\\"Roll no\\\">\\n          <small id=\\\"emailHelp\\\" class=\\\"invalid-feedback\\\">Please enter roll no</small>\\n        </div>\\n      </div>\\n      <div class=\\\"col-lg-3\\\">\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"exampleInputEmail1\\\">Date Of Addmission</label>\\n          <input formControlName=\\\"doa\\\" \\n          [value]=\\\"todaydate\\\"\\n          [bsConfig]=\\\"bsConfig\\\"\\n          bsDatepicker\\n          [ngClass]=\\\"{'is-invalid': registerStudent.get('doa').errors && registerStudent.get('doa').touched}\\\" \\n          type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"exampleInputEmail1\\\" aria-describedby=\\\"emailHelp\\\" placeholder=\\\"DOA\\\">\\n          <small id=\\\"emailHelp\\\" class=\\\"invalid-feedback\\\">Please select admission date</small>\\n        </div>\\n      </div>\\n      <div class=\\\"col-lg-3\\\">\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"exampleInputEmail1\\\">Medium</label>\\n          <input  formControlName=\\\"medium\\\"\\n          [ngClass]=\\\"{'is-invalid': registerStudent.get('medium').errors && registerStudent.get('medium').touched}\\\" \\n          type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"exampleInputEmail1\\\" aria-describedby=\\\"emailHelp\\\" placeholder=\\\"Medium\\\">\\n          <small id=\\\"emailHelp\\\" class=\\\"invalid-feedback\\\">Please select medium</small>\\n\\n        </div>\\n      </div>\\n    \\n  </div>\\n\\n<hr>\\n  <div class=\\\"row\\\">\\n<div class=\\\"col-lg-5\\\">\\n</div>\\n<div class=\\\"col-lg-2\\\">\\n    <button class=\\\"btn btn-primary event-btn m-2\\\" type=\\\"submit\\\" [disabled]=\\\"!registerStudent.valid\\\">\\n        <span *ngIf=\\\"this.btnLoader\\\"  class=\\\"spinner-border spinner-border-sm\\\" role=\\\"status\\\"></span>\\n        <span *ngIf=\\\"this.btnLoader\\\"  class=\\\"load-text\\\"> Loading...</span>\\n        <span *ngIf=\\\"!this.btnLoader\\\" class=\\\"btn-text\\\"><i class=\\\"fa fa-save\\\"></i> Save</span>\\n      </button>\\n    \\n</div>\\n<div class=\\\"col-lg-5\\\">\\n \\n</div>\\n  </div> \\n\\n</form> \\n </div>\\n\\n\"","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport {BasicStudentComponent} from './basic-student.component';\r\n \r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: BasicStudentComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class BasicStudentRoutingModule { }\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2RlbW8vdWktZWxlbWVudHMvdWktYmFzaWMvYmFzaWMtc3R1ZGVudC9iYXNpYy1zdHVkZW50LmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';\nimport { BsDatepickerConfig } from 'ngx-bootstrap/datepicker/bs-datepicker.config';\nimport { ClasslevelService } from 'src/app/services/classlevel.service';\nimport { QuickAdmission } from 'src/app/Models/QuickAdmission';\nimport { ToastrService } from 'ngx-toastr';\nimport { Class } from 'src/app/Models/Class';\n\n@Component({\n  selector: 'app-basic-student',\n  templateUrl: './basic-student.component.html',\n  styleUrls: ['./basic-student.component.css']\n})\nexport class BasicStudentComponent implements OnInit {\npublic btnLoader: boolean;\nregisterStudent:FormGroup;\nselected=true;\nbsConfig: Partial<BsDatepickerConfig>;\nclassLevels:any;\nallClasses:any;\nallSec:Class;\nsections:string[];\nquickAdmission:QuickAdmission;\ntodaydate:any;\nadmissionNo:any;\nconstructor(private fb:FormBuilder,private _classLevel:ClasslevelService,private toastr: ToastrService) {\n  this.btnLoader = false;\n }\n\n  ngOnInit() { \n    this.bsConfig = {\n      containerClass: 'theme-red'\n    };\n    this.todaydate = new Date();\n    var dd = String(this.todaydate.getDate()).padStart(2, '0');\n    var mm = String(this.todaydate.getMonth() + 1).padStart(2, '0'); //January is 0!\n    var yyyy = this.todaydate.getFullYear(); \n    this.todaydate = mm + '/' + dd + '/' + yyyy;\n   \n    this.createRegisterForm();\n    this.getLastId();\n  }\n\n  createRegisterForm(){\n    this.registerStudent=this.fb.group({\n      firstName:['',[Validators.required,Validators.maxLength(12),Validators.minLength(3)]],\n      lastName:['',[Validators.required,Validators.maxLength(12),Validators.minLength(3)]],\n      email:['',[Validators.required,Validators.maxLength(25),Validators.minLength(14)]],\n      gender:['',Validators.required],\n      dob:['',Validators.required],\n      doa:[this.todaydate],\n      motherTongue:['HINDI',Validators.required],\n      nationality:['INDIAN',Validators.required],\n      fathername:['',Validators.required],\n      phone:['',[Validators.required,Validators.minLength(10),Validators.maxLength(10),Validators.pattern('^[0-9]*$')]],\n      classLevel:['',Validators.required],\n      standers:['',Validators.required],\n      classsection:['',Validators.required],\n      admissionno:[this.admissionNo],\n      rollno:['',Validators.required],\n      medium:['ENGLISH',Validators.required],\n    })\n  } \n\n  LevelChange(event) {\n    let Ids = event.target.value;\n    this._classLevel.getClass(Ids).subscribe((data) => {\n      this.allClasses = data;\n    })\n  }\n\n  ClassChange(event) {\n    let classes = event.target.value;\n    this._classLevel.getSection(classes).subscribe((data:Class) => {\n      this.allSec = data;\n     this.sections= this.allSec.sections.split(',');\n      \n    })\n  }\n\nregister() { \n  if (this.registerStudent.controls['standers'].value == \"--Select--\") \n  return this.toastr.warning(\"Please Select Correct Class\");\n  \n  this.btnLoader = true;  \n   if (this.registerStudent.valid) {\n    this.quickAdmission = Object.assign({}, this.registerStudent.value); \n    this.quickAdmission.admissionNo=this.admissionNo.toString();\n    this._classLevel.register(this.quickAdmission).subscribe(() => {\n      this.toastr.success('Quick Admission Done!', 'Data Saved');\n      this.registerStudent.reset();\n      this.btnLoader = false;\n      this.getLastId();\n      this.createRegisterForm();\n    }, error => { \n      this.toastr.error('Quick Admission Failed!', 'Problem in saving Data',error);\n      this.btnLoader = false;\n    },()=>{ \n    });\n  }\n}\n\n// check phoneNo contain alphabet\n  checkAlpha(event) {\n    let val = event.target.value;\n    if (isNaN(val)) {\n      let str = val.substring(0, val.length - 1);\n      event.target.value = str;\n    }\n    \n}\ngetLastId(){\n  this._classLevel.getLastAdmissionId().subscribe((data:QuickAdmission)=>{ \n  if(data==null){\n    this.admissionNo=1;\n  }\n     this.admissionNo=data.admissionNo; \n this.admissionNo=parseInt(this.admissionNo)+1; \n   })\n}\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BasicStudentComponent } from './basic-student.component';\nimport { SharedModule } from 'src/app/theme/shared/shared.module';\nimport { BasicStudentRoutingModule } from './basic-student-routing.module';\nimport { BsDatepickerModule } from 'ngx-bootstrap/datepicker';\nimport { ToastrModule } from 'ngx-toastr';\n @NgModule({\n  imports: [\n    CommonModule,\n    SharedModule,\n    BasicStudentRoutingModule, \n     BsDatepickerModule.forRoot(),\n     ToastrModule.forRoot()\n  ],\n  declarations: [BasicStudentComponent]\n})\nexport class BasicStudentModule { }\n"],"sourceRoot":"webpack:///","file":"basic-student-basic-student-module-es5.js"}